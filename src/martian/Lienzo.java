/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package martian;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author erikbv99421
 */
public class Lienzo extends javax.swing.JPanel implements Runnable {

    int[][] matrix_;

    //Listas necesarias
    ArrayList<Nodo> listaAbierta;
    ArrayList<Nodo> listaCerrada;
    ArrayList<Nodo> listaAdyacentes;
    ArrayList<Nodo> listaVisitados;

    //nodos conocidos
    Nodo nodoInicial;
    Nodo nodoFinal;

    Thread hilo_;

    //Datos del mapa por defecto
    static int entrada_ = 3, salida_ = 4, filas_ = 10, columnas_ = 10;
    int filaEntrada_ = 3, columnaEntrada_ = 0, filaSalida_ = 8, columnaSalida_ = 9;

    int x_ = 0, y_ = 0, isFinished = 0;
    //objetos gráficos
    int altoFilas_ = 0;
    int anchoColumnas_ = 0;
    BufferedImage robot_, station_, obstacle_, box_, background_, watch_, info_;
    URL r_ = getClass().getResource("images/robot.png");
    URL s_ = getClass().getResource("images/station.png");
    URL o_ = getClass().getResource("images/obstaculo.png");
    URL bo_ = getClass().getResource("images/paquete.png");
    URL bg_ = getClass().getResource("images/arena.png");
    URL w_ = getClass().getResource("images/cronometro.jpg");
    URL inf_ = getClass().getResource("images/info.png");
    int f_ = 0, radioButtons_ = 0;
    int flag_ = 5; //paint road step by step
    boolean exit_ = false;

    //para mapa manual
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        JOptionPane.showMessageDialog(this, "si desea cargar mapa por defecto introduzca numero de filas y columnas a cero");
        String aux1 = JOptionPane.showInputDialog(this, "Introducir numero de filas:");
        int f = Integer.parseInt(aux1);
        String aux2 = JOptionPane.showInputDialog(this, "Introducir numero de columnas:");
        int c = Integer.parseInt(aux2);
        String aux3 = JOptionPane.showInputDialog(this, "Introducir porcentaje de obstaculos:");
        int porcentaje = Integer.parseInt(aux3);
        int nObstaculos = (f * c) * (porcentaje / 100);
        initComponents();
        restart(0, 0, nObstaculos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        x_ = evt.getX() / anchoColumnas_;
        y_ = evt.getY() / altoFilas_;
        if (matrix_[y_][x_] != entrada_ && matrix_[y_][x_] != salida_ && f_ == 1) {
            if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 1) {
                matrix_[y_][x_] = 1;
            } else if (evt.getButton() == evt.BUTTON3 && radioButtons_ == 1) {
                matrix_[y_][x_] = 0;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 2) {
                matrix_[filaEntrada_][columnaEntrada_] = 0;
                matrix_[y_][x_] = entrada_;
                filaEntrada_ = y_;
                columnaEntrada_ = x_;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 3) {
                matrix_[filaSalida_][columnaSalida_] = 0;
                matrix_[y_][x_] = salida_;
                filaSalida_ = y_;
                columnaSalida_ = x_;
            }
            repaint();
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    @Override
    public void run() {

        if (solve()) {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "Solución del algoritmo A*");
            for (int i =listaCerrada.size()-1; i>=0;i--) {
            Nodo aux;
            aux = listaCerrada.get(i);
            System.out.println("Sacando de LC los nodos para pintar " + aux.x_+ "  "+aux.y_);
            matrix_[aux.x_][aux.y_] = flag_;
            repaint();
        }
        } else {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "No hay solución del algoritmo A*");
        }
    }

    public void restart(int f, int c, int nObstaculos) {
        hilo_ = new Thread(this);
        f_ = 1;
        isFinished = 0;
        exit_ = false;
        if (f == 0 && c == 0) {
            int[][] sampleMap = {
                {0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
                {entrada_, 0, 0, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 0, 1, 0, 0, 0},
                {1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
                {1, 0, 0, 0, 0, 1, 1, 0, 1, 1},
                {1, 0, 1, 0, 0, 1, 0, 0, 0, salida_},
                {1, 0, 1, 1, 1, 1, 0, 1, 1, 1}};
            try {
                robot_ = ImageIO.read(r_);
                station_ = ImageIO.read(s_);
                obstacle_ = ImageIO.read(o_);
                //box_ = ImageIO.read(bo_);
                background_ = ImageIO.read(bg_);
                //watch_ =  ImageIO.read(w_);
                //info_ = ImageIO.read(inf_);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se cargo imagen, ERROR:" + e.getMessage());
            }
            matrix_ = sampleMap;
            filaEntrada_ = 3;
            columnaEntrada_ = 0;
            filaSalida_ = 8;
            columnaSalida_ = 9;
            altoFilas_ = 40;
            anchoColumnas_ = 40;
        } else {
            try {
                robot_ = ImageIO.read(r_);
                station_ = ImageIO.read(s_);
                obstacle_ = ImageIO.read(o_);
                //box_ = ImageIO.read(bo_);
                background_ = ImageIO.read(bg_);
                //watch_ =  ImageIO.read(w_);
                //info_ = ImageIO.read(inf_);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se cargo imagen, ERROR:" + e.getMessage());
            }
            matrix_ = new int[f][c];
            //ponemos una entrada y salida por defecto
            filaEntrada_ = 0;
            columnaEntrada_ = 0;
            matrix_[filaEntrada_][columnaEntrada_] = entrada_;
            filaSalida_ = 0;
            columnaSalida_ = 1;
            matrix_[filaSalida_][columnaSalida_] = salida_;
            altoFilas_ = 400 / f;
            anchoColumnas_ = 400 / c;
            RandomMap(nObstaculos);
        }

        listaAbierta = new ArrayList<>();
        listaCerrada = new ArrayList<>();
        listaVisitados = new ArrayList<>();
        //Metemos nodo inicial
        nodoFinal = new Nodo(filaSalida_, columnaSalida_);
        nodoInicial = new Nodo(filaEntrada_, columnaEntrada_, nodoFinal);
        listaAbierta.add(nodoInicial);

        repaint();
    }

    public void RandomMap() {
        for (int i = 0; i < matrix_.length; i++) {
            for (int j = 0; j < matrix_.length; j++) {
                int aux = (int) (Math.random() * 1.99);
                if (i == filaEntrada_ && j == columnaEntrada_) {
                    matrix_[i][j] = entrada_;
                } else if (i == filaSalida_ && j == columnaSalida_) {
                    matrix_[i][j] = salida_;
                } else {
                    matrix_[i][j] = aux;
                }
            }
        }

        //Generate Random road
        int k = filaEntrada_, l = columnaEntrada_;
        if (filaEntrada_ < filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k < filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }
        } else if (filaEntrada_ < filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k < filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k > filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }

        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k > filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        }
        matrix_[filaSalida_][columnaSalida_] = salida_;
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        if (f_ >= 1) {
            g.setColor(getBackground());
            g.fillRect(0, 0, getWidth(), getHeight());
            for (int i = 0; i < matrix_.length; i++) {
                for (int j = 0; j < matrix_.length; j++) {
                    g.setColor(Color.BLACK);
                    if (matrix_[i][j] == 0 || matrix_[i][j] == filaSalida_) { //*
                        g.drawImage(background_, j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_, this);
                    } else if (matrix_[i][j] == 1) {
                        g.drawImage(obstacle_, j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_, this);
                    } else if (matrix_[i][j] == entrada_) {
                        g.drawImage(robot_, j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_, this);
                    } else if (matrix_[i][j] == salida_) {
                        g.drawImage(station_, j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_, this);
                    } else if (matrix_[i][j] == flag_) {
                        g.setColor(Color.BLUE);
                        g.fillRect(j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_);
                        g.setColor(Color.BLUE);
                        g.drawRect(j * anchoColumnas_, i * altoFilas_, altoFilas_, anchoColumnas_);
                    }
                }
            }
        }
        //super.paint(g); //To change body of generated methods, choose Tools | Templates.
    }

    public int get_elem(int f, int c) {
        return matrix_[f][c];
    }

    public int get_fila_salida() {
        return filaSalida_;
    }

    public int get_columna_salida() {
        return columnaSalida_;
    }

    public boolean checkRoad(int f, int c) {

        if (f < 0 || f >= filas_ || c < 0 || c >= columnas_) {
            return false;
        }
        if (matrix_[f][c] == flag_ || matrix_[f][c] == 1) {
            return false;
        }
        return true;
    }

    public boolean checkListaAbierta(Nodo n) {
        for (int i = 0; i < listaAbierta.size()-1; i++) {
            Nodo aux = listaAbierta.get(i);
            System.out.println("Dentro CkcLA");
            System.out.println("Buscando en LA  "+ n.x_ +"  "+n.y_);
            System.out.println("Elemento en LA  "+ aux.x_ +"  "+aux.y_);
            if ((aux.x_ == n.x_) && (aux.y_ == n.y_)) {
                return true;
            }
        }
        return false;        
    }

    public boolean checkListaCerrada(Nodo n) {
        for (int i = 0; i < listaCerrada.size()-1; i++) {
            Nodo aux = listaCerrada.get(i);
            System.out.println("Dentro CkcLC");
            System.out.println("Buscando en LC  "+ n.x_ +"  "+n.y_);
            System.out.println("Elemento en LC  "+ aux.x_ +"  "+aux.y_);
            if ((aux.x_ == n.x_) && (aux.y_ == n.y_)) {
                return true;
            }
        }
        return false;        
    }

    public Nodo MenorDeLaLista() {
        Nodo aux, aux2;
        int elementoABorrar = 0;
        Nodo menor = listaAbierta.get(0);
        if (listaAbierta.size() == 0) {
            JOptionPane.showMessageDialog(this, "lista abierta vacia");
        }
        if (listaAbierta.size() == 1) {
            listaAbierta.remove(0);
            return menor;
        } else {
            for (int i = 0; i < listaAbierta.size() - 1; i++) {
                if (i + 1 > listaAbierta.size()) {
                    JOptionPane.showMessageDialog(this, "desbordamiento de lista abierta por el final.");
                }
                aux = listaAbierta.get(i);
                aux2 = listaAbierta.get(i + 1);
                if (aux.get_cost() < aux2.get_cost() && aux.get_cost() < menor.get_cost()) {
                    menor = aux;
                    elementoABorrar = i;
                }
                if (aux2.get_cost() < aux.get_cost() && aux2.get_cost() < menor.get_cost()) {
                    menor = aux2;
                    elementoABorrar = i+1;
                }
            }
            System.out.println("borrando elemento LA[" +elementoABorrar+"] = " +menor.x_ + " " + menor.y_);
            listaAbierta.remove(elementoABorrar);
            System.out.println("Envindo menor de LA = " +menor.x_ + " " + menor.y_);
        }
        return menor;
    }

    private void EvaluarAdyacente(int f, int c, Nodo padre) {
        if (checkRoad(f, c)) {
            //JOptionPane.showMessageDialog(this, "se evalua el nodo `["+f+"]["+c+"]");
            Nodo sucesor = new Nodo(f, c, nodoFinal);
            System.out.println("padre  "+ padre.x_ +"  "+padre.y_);
            System.out.println("sucesor  "+ sucesor.x_ +"  "+sucesor.y_);
            sucesor.set_padre(padre.x_, padre.y_);
            /*Comprobar los casos posibles
             1) adyacente y padre estan en listaCerrada
             2) adyacente y padre estan en listaAbierta
             3) adyacente y padre no estan ni en listaAbierta ni listaCerrada
             */
            if (checkListaCerrada(sucesor) && checkListaCerrada(padre)) {
                if (sucesor.get_cost() <= padre.get_cost()) {
                    actualizarCerrada(padre);
                } else {
                    actualizarCerrada(sucesor);
                }
            }
            else if (checkListaAbierta(sucesor) && checkListaAbierta(padre)) {
                if (sucesor.get_cost() <= padre.get_cost()) {
                    actualizarAbierta(padre);
                } else {
                    actualizarAbierta(sucesor);
                }
            }
            else if ((!checkListaAbierta(sucesor) && !checkListaAbierta(padre)) && (!checkListaCerrada(sucesor) && !checkListaCerrada(padre))) {
                listaAbierta.add(sucesor);
                 System.out.println("se mete en la LA el sucesor  " + sucesor.x_+ "  "+sucesor.y_);
            }
        }

    }

    private void changePadre(Nodo adyacente, Nodo padre) {
        //buscar el padre en la LA y cambiarlo por el adyacente
        for (int i = 0; i < listaCerrada.size(); i++) {
            Nodo aux = listaCerrada.get(i);
            if ((aux.x_ == padre.x_) && (aux.y_ == padre.y_)) {
                listaAbierta.add(i, adyacente);
            }
        }
    }

    public boolean solve() {
        try {
            Thread.sleep(200);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        boolean solucionE_ = false, fallo_ = false;
        while (solucionE_ != true) {
            if (listaAbierta.isEmpty()) {

                return fallo_;
            }
            //Nodo camino = MenorDeLaLista();
            Nodo actual = MenorDeLaLista();
            
            listaCerrada.add(actual);
            System.out.println("se mete en la LC  " + actual.x_+ "  "+actual.y_);
            matrix_[actual.x_][actual.y_] = entrada_;
            matrix_[actual.x_][actual.y_] = flag_;
            if (actual.x_ == nodoFinal.x_ && actual.y_ == nodoFinal.y_) {
                solucionE_ = true;
                return solucionE_;
            } else {
                //celda arriba
                EvaluarAdyacente(actual.x_ - 1, actual.y_, actual);
                //celda derecha
                EvaluarAdyacente(actual.x_, actual.y_ + 1, actual);
                //celda abajo
                EvaluarAdyacente(actual.x_ + 1, actual.y_, actual);
                //celda izquierda
                EvaluarAdyacente(actual.x_, actual.y_ - 1, actual);
                //repaint();

            }
        }
        Nodo aux;
        //imprimir camino solución
        for (int i =listaCerrada.size()-1; i>=0;i--) {
        
            aux = listaCerrada.get(i);
            System.out.println("Sacando de LC los nodos para pintar " + aux.x_+ "  "+aux.y_);
            matrix_[aux.x_][aux.y_] = flag_;
            repaint();
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
        return solucionE_;
    }

    private void actualizarCerrada(Nodo nodoAEliminar) {
        Nodo aux;
        for (int i = 0; i < listaCerrada.size(); i++) {
            aux = listaCerrada.get(i);
            if (aux.x_ == nodoAEliminar.x_ && aux.y_ == nodoAEliminar.y_) {
                listaCerrada.remove(i);
            }
        }
    }
    
    private void actualizarAbierta(Nodo nodoAEliminar) {
        Nodo aux;
        for (int i = 0; i < listaAbierta.size(); i++) {
            aux = listaAbierta.get(i);
            if (aux.x_ == nodoAEliminar.x_ && aux.y_ == nodoAEliminar.y_) {
                listaAbierta.remove(i);
            }
        }
    }

    private void RandomMap(int nObstaculos) {
        for (int i = 0; i < matrix_.length; i++) {
            for (int j = 0; j < matrix_.length; j++) {
                int aux = (int) (Math.random() * 1.99);
                if (i == filaEntrada_ && j == columnaEntrada_) {
                    matrix_[i][j] = entrada_;
                } else if (i == filaSalida_ && j == columnaSalida_) {
                    matrix_[i][j] = salida_;
                } else if (nObstaculos > 0 && aux == 1) {
                    matrix_[i][j] = aux;
                    nObstaculos--;
                } else {
                    matrix_[i][j] = 0;
                }
            }
        }

        //Generate Random road
        int k = filaEntrada_, l = columnaEntrada_;
        if (filaEntrada_ < filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k < filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }
        } else if (filaEntrada_ < filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k < filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k > filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }

        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k > filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        }
        matrix_[filaSalida_][columnaSalida_] = salida_;
        repaint();
    }

    private boolean checkSalida(int f, int c) {
        if (f == filaSalida_ && c == columnaSalida_) {
            return true;
        } else {
            return false;
        }
    }
}
