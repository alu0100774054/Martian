/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package martian;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author erikbv99421
 */
public class Lienzo extends javax.swing.JPanel implements Runnable {

    int[][] matrix_;
    
    //Listas necesarias
    ArrayList<Nodo> listaAbierta;
    ArrayList<Nodo> listaCerrada;
    ArrayList<Nodo> listaAdyacentes;
    
    //nodos conocidos
    Nodo nodoInicial;
    Nodo nodoFinal;
    
    Thread hilo_;
    
    //Datos del mapa por defecto
    static int entrada_ = 3, salida_ = 4, filas_ = 10, columnas_ = 10;
    int filaEntrada_ = 3, columnaEntrada_ = 0, filaSalida_ = 8, columnaSalida_ = 9;
    
    int x_ = 0, y_ = 0, isFinished = 0;
    //objetos gráficos
    BufferedImage robot_, station_, obstacle_, box_, background_, watch_, info_;
    URL r_ = getClass().getResource("images/robot.png");
    URL s_ = getClass().getResource("images/station.png");
    URL o_ = getClass().getResource("images/obstaculo.png");
    URL bo_ = getClass().getResource("images/paquete.png");
    URL bg_ = getClass().getResource("images/arena.png");
    URL w_ = getClass().getResource("images/cronometro.jpg");
    URL inf_ = getClass().getResource("images/info.png");
    int f_ = 0, radioButtons_ = 0;
    int flag_ = 5; //paint road step by step

        
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        restart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        x_ = evt.getX() / 40;
        y_ = evt.getY() / 40;
        if (matrix_[y_][x_] != entrada_ && matrix_[y_][x_] != salida_ && f_ == 1) {
            if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 1) {
                matrix_[y_][x_] = 1;
            } else if (evt.getButton() == evt.BUTTON3 && radioButtons_ == 1) {
                matrix_[y_][x_] = 0;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 2) {
                matrix_[filaEntrada_][columnaEntrada_] = 0;
                matrix_[y_][x_] = entrada_;
                filaEntrada_ = y_;
                columnaEntrada_ = x_;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 3) {
                matrix_[filaSalida_][columnaSalida_] = 0;
                matrix_[y_][x_] = salida_;
                filaSalida_ = y_;
                columnaSalida_ = x_;
            }
            repaint();
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    @Override
    public void run() {
        
        if (solve(filaEntrada_, columnaEntrada_)) {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "Solución del algoritmo mas malo");
        } else {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "No hay solución del algoritmo mas malo");
        }
    }

    public void restart() {
        int[][] sampleMap = {
        {0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
        {entrada_, 0, 0, 0, 1, 0, 1, 0, 0, 0},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0},
        {1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
        {1, 0, 0, 0, 0, 1, 1, 0, 1, 1},
        {1, 0, 1, 0, 0, 1, 0, 0, 0, salida_},
        {1, 0, 1, 1, 1, 1, 0, 1, 1, 1}};
        try {
            robot_ = ImageIO.read(r_);
            station_ = ImageIO.read(s_);
            obstacle_ = ImageIO.read(o_);
            //box_ = ImageIO.read(bo_);
            background_ = ImageIO.read(bg_);
            //watch_ =  ImageIO.read(w_);
            //info_ = ImageIO.read(inf_);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se cargo imagen, ERROR:" + e.getMessage());
        }

        matrix_ = sampleMap;
        hilo_ = new Thread(this);
        filaEntrada_ = 3;
        columnaEntrada_ = 0;
        filaSalida_ = 8;
        columnaSalida_ = 9;
        f_ = 1;
        isFinished = 0;
        listaAbierta = new ArrayList<>();
        //Metemos nodo inicial
        listaAbierta.add(nodoInicial);
        listaCerrada = new ArrayList<>();
        nodoFinal = new Nodo(filaSalida_, columnaSalida_);
        nodoInicial = new Nodo(filaEntrada_, columnaEntrada_, nodoFinal);
        
        repaint();
    }

    public void RandomMap() {
        for (int i = 0; i < matrix_.length; i++) {
            for (int j = 0; j < matrix_.length; j++) {
                int aux = (int) (Math.random() * 1.99);
                if (i == filaEntrada_ && j == columnaEntrada_) {
                    matrix_[i][j] = entrada_;
                } else if (i == filaSalida_ && j == columnaSalida_) {
                    matrix_[i][j] = salida_;
                } else {
                    matrix_[i][j] = aux;
                }
            }
        }

        //Generate Random road
        int k = filaEntrada_, l = columnaEntrada_;
        if (filaEntrada_ < filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k < filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }
        } else if (filaEntrada_ < filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k < filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k > filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }

        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k > filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        }
        matrix_[filaSalida_][columnaSalida_] = salida_;
        repaint();
    }
       

    @Override
    public void paint(Graphics g) {
        if (f_ >= 1) {
            g.setColor(getBackground());
            g.fillRect(0, 0, getWidth(), getHeight());
            for (int i = 0; i < matrix_.length; i++) {
                for (int j = 0; j < matrix_.length; j++) {
                    g.setColor(Color.BLACK);
                    if (matrix_[i][j] == 0 || matrix_[i][j] == filaSalida_) { //*
                        g.drawImage(background_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == 1) {
                        g.drawImage(obstacle_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == entrada_) {
                        g.drawImage(robot_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == salida_) {
                        g.drawImage(station_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == flag_) {
                        g.setColor(Color.BLUE);
                        g.fillRect(j * 40, i * 40, 40, 40);
                        g.setColor(Color.BLUE);
                        g.drawRect(j * 40, i * 40, 40, 40);
                    }
                }
            }
        }
        //super.paint(g); //To change body of generated methods, choose Tools | Templates.
    }
    public int get_elem(int f, int c){
        return matrix_[f][c];
    }
    public int get_fila_salida() {
        return filaSalida_;
    }
    public int get_columna_salida() {
        return columnaSalida_;
    }
    public boolean checkRoad(int f, int c) {

        if (f < 0 || f >= filas_ || c < 0 || c >= columnas_) {
            return false;
        }
        if (matrix_[f][c] == flag_ || matrix_[f][c] == 1) {
            return false;
        }
        return true;
    }
    
    public boolean solve(int f, int c) {
        boolean exit = false;
        try {
            Thread.sleep(200);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        matrix_[f][c] = flag_;
        
        if (f == filaSalida_ && c == columnaSalida_) {
            return true;
        }
        
        //Sacamos el primer elemento de la lista abierta y lo metemos en la cerrada
        Nodo nodoAux = listaAbierta.get(0);
        
        listaAbierta.remove(0);
        
        //celda de arriba
        if(!exit && checkRoad(f+1,c))
        {
            Nodo nodoUP = new Nodo(f+1, c, nodoFinal);
            listaAbierta.add(nodoUP);
        }
        //celda de la derecha
        if(!exit && checkRoad(f,c+1))
        {
            Nodo nodoRIGHT = new Nodo(f, c+1,nodoFinal);
            listaAbierta.add(nodoRIGHT);
        }
         //celda de abajo
        if(!exit && checkRoad(f-1,c))
        {
            Nodo nodoDOWN = new Nodo(f-1, c, nodoFinal);
            listaAbierta.add(nodoDOWN);
        }
         //celda de la izquierda
        if(!exit && checkRoad(f,c-1))
        {
            Nodo nodoLEFT = new Nodo(f, c-1, nodoFinal);
            listaAbierta.add(nodoLEFT);
        }
        //hay que probarlo
        Collections.sort(listaAbierta, new Comparator<Nodo>(){
			//@Override
			public int compare(Nodo o1, Nodo o2) {
				return new Integer (o1.get_cost()).compareTo(o2.get_cost());
			}	
	});
        
        //listaCerrada.add(listaAbierta.remove(0));
        matrix_[nodoAux.x_][nodoAux.y_] = entrada_;
       repaint();
      
        solve(nodoAux.x_, nodoAux.y_);
        return exit;
        
       /*
        //down
        if (!exit && checkRoad(f + 1, c)) {
            matrix_[f + 1][c] = entrada_;
            repaint();
            exit = solve(f + 1, c);
        }

        //right
        if (!exit && checkRoad(f, c + 1)) {
            matrix_[f][c + 1] = entrada_;
            repaint();
            exit = solve(f, c + 1);
        }

        //left
        if (!exit && checkRoad(f, c - 1)) {
            matrix_[f][c - 1] = entrada_;
            repaint();
            exit = solve(f, c - 1);
        }

        //up
        if (!exit && checkRoad(f - 1, c)) {
            matrix_[f - 1][c] = entrada_;
            repaint();
            exit = solve(f - 1, c);
        }

        return exit;
    }*/
    
    /*
    public boolean checkRoadAEstrella(int f, int c, Nodo nodoActual) {

        if (f < 0 || f >= filas_ || c < 0 || c >= columnas_) {
            return false;
        }
        if (matrix_[f][c] == flag_ || matrix_[f][c] == 1) {
            return false;
        }
        for (int i=0;i<listaCerrada.size();i++)
            if (listaCerrada.get(i) == nodoActual)
                return false;
        for (int i=0;i<listaAbierta.size();i++)
            if (listaAbierta.get(i) == nodoActual){
                
            }
        
        return true;
    }
    public boolean AEstrella(int f,int c) {
       boolean exit = false;
        try {
            Thread.sleep(200);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        matrix_[f][c] = flag_;
        
        if (f == filaSalida_ && c == columnaSalida_) {
            return true;
        }
        
        Paso 0 Añadimos la celda origen a la lista abierta.
        Paso 1 Cogemos el primer elemento de la lista abierta y lo sacamos y lo insertamos en la lista cerrada.
        Paso 2 Cogemos las celdas adyacentes a la celda extraída.
        Paso 3 Para cada celda adyacente:
            A) Si la celda es la celda destino, hemos terminado. Recorremos inversamente la cadena de padres hasta llegar al origen para obtener el camino.
            B) Si la celda representa un muro o terreno infranqueable; la ignoramos.
            C) Si la celda ya está en la lista cerrada, la ignoramos.
            D) Si la celda ya está en la lista abierta, comprobamos si su nueva G (lo veremos más adelante) es mejor que la actual, en cuyo caso recalculamos factores (lo veremos más adelante) y ponemos como padre de la celda a la celda extraída. En caso de que no sea mejor, la ignoramos.
            E) Para el resto de celdas adyacentes, les establecemos como padre la celda extraída y recalculamos factores. Después las añadimos a la lista abierta.
        Paso 4 Ordenamos la lista abierta. La lista abierta es una lista ordenada de forma ascendente en función del factor F de las celdas.
        Paso 5 Volver al paso 1.
        
        // PASO 4
        Collections.sort(listaAbierta, new Comparator() {
           public int compare(Nodo n1, Nodo n2) {
               return new Integer(n1.get_cost()).compareTo(new Integer(n2.get_cost()));
           }

           @Override
           public int compare(Object o1, Object o2) {
               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
           }
       });
        
        // PASO 1
        Nodo nodoInicial = new Nodo(filaEntrada_, columnaEntrada_);
        listaAbierta.add(nodoInicial);
        
        // PASO 2
         Nodo nodoAux = listaAbierta.remove(0);
        listaCerrada.add(nodoAux);
        
        // PASO 3
        //up
        if (!exit && checkRoadAEstrella(f + 1, c,nodoAux)) {
            matrix_[f + 1][c] = entrada_;
            repaint();
            exit = AEstrella(f + 1, c);
        }
        //right
        if (!exit && checkRoadAEstrella(f, c + 1,nodoAux)) {
            matrix_[f][c + 1] = entrada_;
            repaint();
            exit = AEstrella(f, c + 1);
        }
        //left
        if (!exit && checkRoadAEstrella(f, c - 1,nodoAux)) {
            matrix_[f][c - 1] = entrada_;
            repaint();
            exit = AEstrella(f, c - 1);
        }
        //down
        if (!exit && checkRoadAEstrella(f - 1, c,nodoAux)) {
            matrix_[f - 1][c] = entrada_;
            repaint();
            exit = AEstrella(f - 1, c);
        }
        //up-right
        if (!exit && checkRoadAEstrella(f + 1, c + 1,nodoAux)) {
            matrix_[f + 1][c + 1] = entrada_;
            repaint();
            exit = AEstrella(f + 1, c + 1);
        }
        //up-left
        if (!exit && checkRoadAEstrella(f + 1, c - 1,nodoAux)) {
            matrix_[f + 1][c - 1] = entrada_;
            repaint();
            exit = AEstrella(f + 1, c - 1);
        }
        //down-right
        if (!exit && checkRoadAEstrella(f - 1, c + 1,nodoAux)) {
            matrix_[f - 1][c + 1] = entrada_;
            repaint();
            exit = AEstrella(f - 1, c + 1);
        }
        //down-left
        if (!exit && checkRoadAEstrella(f - 1, c - 1,nodoAux)) {
            matrix_[f - 1][c - 1] = entrada_;
            repaint();
            exit = AEstrella(f - 1, c - 1);
        }
 
       return exit;
   }
    */
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    }
}
