/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package martian;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author erikbv99421
 */
public class Lienzo extends javax.swing.JPanel implements Runnable {

    int[][] matrix_;
    Thread hilo_;
    static int entrada_ = 3, salida_ = 4, filas_ = 10, columnas_ = 10;
    int filaEntrada_ = 3, columnaEntrada_ = 0, filaSalida_ = 8, columnaSalida_ = 9;
    int x_ = 0, y_ = 0, termino_ = 0;
    BufferedImage robot_, station_, obstacle_, box_, background_;
    URL r_ = getClass().getResource("images/robot.png");
    URL s_ = getClass().getResource("images/station.png");
    URL o_ = getClass().getResource("images/obstaculo.png");
    URL bo_ = getClass().getResource("images/paquete.png");
    URL bg_ = getClass().getResource("images/arena.jpg");
    int f_ = 0, radioButtons_ = 0;

    /**
     * Creates new form Lienzo
     */

    public Lienzo() {
        initComponents();
        restart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void restart() {
        int[][] sampleMap = {{0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
        {entrada_, 0, 0, 0, 1, 0, 1, 0, 0, 0},
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0},
        {1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
        {1, 0, 0, 0, 0, 1, 1, 0, 1, 1},
        {1, 0, 1, 0, 0, 1, 0, 0, 0, salida_},
        {1, 0, 1, 1, 1, 1, 0, 1, 1, 1}};
        try {
            robot_ = ImageIO.read(r_);
            station_ = ImageIO.read(s_);
            obstacle_ = ImageIO.read(o_);
            box_ = ImageIO.read(bo_);
            background_ = ImageIO.read(bg_);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se cargo imagen, ERROR:" + e.getMessage());
        }

        matrix_ = sampleMap;
        hilo_ = new Thread(this);
        filaEntrada_ = 3;
        columnaEntrada_ = 0;
        filaSalida_ = 8;
        columnaSalida_ = 9;
        f_ = 1;
        termino_ = 0;

        repaint();
    }

    public void RandomMap() {
        for (int i = 0; i < matrix_.length; i++) {
            for (int j = 0; j < matrix_.length; j++) {
                int aux = (int) (Math.random() * 1.99);
                if (i == filaEntrada_ && j == columnaEntrada_) {
                    matrix_[i][j] = entrada_;
                } else if (i == filaSalida_ && j == columnaSalida_) {
                    matrix_[i][j] = salida_;
                } else {
                    matrix_[i][j] = aux;
                }
            }
        }

        //Generate Random road
        int k = filaEntrada_, l = columnaEntrada_;
        if (filaEntrada_ < filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k < filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }
        } else if (filaEntrada_ < filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k < filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k > filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }

        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k > filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        }
    matrix_[filaSalida_][columnaSalida_] =  salida_;
    repaint();
    }

    @Override
    public void paint(Graphics g) {
        if (f_ >= 1) {
            
        }
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
