/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package martian;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author erikbv99421
 */
public class Lienzo extends javax.swing.JPanel implements Runnable {

    int[][] matrix_;

    //Listas necesarias
    ArrayList<Nodo> listaAbierta;
    ArrayList<Nodo> listaCerrada;
    ArrayList<Nodo> listaAdyacentes;

    //nodos conocidos
    Nodo nodoInicial;
    Nodo nodoFinal;

    Thread hilo_;

    //Datos del mapa por defecto
    static int entrada_ = 3, salida_ = 4, filas_ = 10, columnas_ = 10;
    int filaEntrada_ = 3, columnaEntrada_ = 0, filaSalida_ = 8, columnaSalida_ = 9;

    int x_ = 0, y_ = 0, isFinished = 0;
    //objetos gráficos
    BufferedImage robot_, station_, obstacle_, box_, background_, watch_, info_;
    URL r_ = getClass().getResource("images/robot.png");
    URL s_ = getClass().getResource("images/station.png");
    URL o_ = getClass().getResource("images/obstaculo.png");
    URL bo_ = getClass().getResource("images/paquete.png");
    URL bg_ = getClass().getResource("images/arena.png");
    URL w_ = getClass().getResource("images/cronometro.jpg");
    URL inf_ = getClass().getResource("images/info.png");
    int f_ = 0, radioButtons_ = 0;
    int flag_ = 5; //paint road step by step
    boolean exit_ = false;

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        restart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        x_ = evt.getX() / 40;
        y_ = evt.getY() / 40;
        if (matrix_[y_][x_] != entrada_ && matrix_[y_][x_] != salida_ && f_ == 1) {
            if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 1) {
                matrix_[y_][x_] = 1;
            } else if (evt.getButton() == evt.BUTTON3 && radioButtons_ == 1) {
                matrix_[y_][x_] = 0;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 2) {
                matrix_[filaEntrada_][columnaEntrada_] = 0;
                matrix_[y_][x_] = entrada_;
                filaEntrada_ = y_;
                columnaEntrada_ = x_;
            } else if (evt.getButton() == evt.BUTTON1 && radioButtons_ == 3) {
                matrix_[filaSalida_][columnaSalida_] = 0;
                matrix_[y_][x_] = salida_;
                filaSalida_ = y_;
                columnaSalida_ = x_;
            }
            repaint();
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    @Override
    public void run() {

        if (solve()) {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "Solución del algoritmo mas malo");
        } else {
            isFinished = 1;
            JOptionPane.showMessageDialog(this, "No hay solución del algoritmo mas malo");
        }
    }

    public void restart() {
        int[][] sampleMap = {
            {0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            {1, 1, 0, 1, 1, 0, 1, 0, 0, 0},
            {entrada_, 0, 0, 0, 1, 0, 1, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            {1, 0, 1, 0, 1, 0, 1, 0, 0, 0},
            {1, 0, 1, 1, 0, 0, 1, 0, 1, 0},
            {1, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            {1, 0, 1, 0, 0, 1, 0, 0, 0, salida_},
            {1, 0, 1, 1, 1, 1, 0, 1, 1, 1}};
        try {
            robot_ = ImageIO.read(r_);
            station_ = ImageIO.read(s_);
            obstacle_ = ImageIO.read(o_);
            //box_ = ImageIO.read(bo_);
            background_ = ImageIO.read(bg_);
            //watch_ =  ImageIO.read(w_);
            //info_ = ImageIO.read(inf_);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se cargo imagen, ERROR:" + e.getMessage());
        }

        matrix_ = sampleMap;
        hilo_ = new Thread(this);
        filaEntrada_ = 3;
        columnaEntrada_ = 0;
        filaSalida_ = 8;
        columnaSalida_ = 9;
        f_ = 1;
        isFinished = 0;
        exit_ = false;
        listaAbierta = new ArrayList<>();
        listaCerrada = new ArrayList<>();
        //Metemos nodo inicial
        nodoFinal = new Nodo(filaSalida_, columnaSalida_);
        nodoInicial = new Nodo(filaEntrada_, columnaEntrada_, nodoFinal);
        listaAbierta.add(nodoInicial);
        

        repaint();
    }

    public void RandomMap() {
        for (int i = 0; i < matrix_.length; i++) {
            for (int j = 0; j < matrix_.length; j++) {
                int aux = (int) (Math.random() * 1.99);
                if (i == filaEntrada_ && j == columnaEntrada_) {
                    matrix_[i][j] = entrada_;
                } else if (i == filaSalida_ && j == columnaSalida_) {
                    matrix_[i][j] = salida_;
                } else {
                    matrix_[i][j] = aux;
                }
            }
        }

        //Generate Random road
        int k = filaEntrada_, l = columnaEntrada_;
        if (filaEntrada_ < filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k < filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }
        } else if (filaEntrada_ < filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k < filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k < filaSalida_) {
                    matrix_[++k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ < columnaSalida_) {

            while (k > filaSalida_ || l < columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l < columnaSalida_) {
                    matrix_[k][++l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][++l] = 0;
                }
            }

        } else if (filaEntrada_ > filaSalida_ && columnaEntrada_ > columnaSalida_) {

            while (k > filaSalida_ || l > columnaSalida_) {
                int road = (int) (Math.random() * 1.99);
                if (road == 0 && l > columnaSalida_) {
                    matrix_[k][--l] = 0;
                } else if (k > filaSalida_) {
                    matrix_[--k][l] = 0;
                } else {
                    matrix_[k][--l] = 0;
                }
            }
        }
        matrix_[filaSalida_][columnaSalida_] = salida_;
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        if (f_ >= 1) {
            g.setColor(getBackground());
            g.fillRect(0, 0, getWidth(), getHeight());
            for (int i = 0; i < matrix_.length; i++) {
                for (int j = 0; j < matrix_.length; j++) {
                    g.setColor(Color.BLACK);
                    if (matrix_[i][j] == 0 || matrix_[i][j] == filaSalida_) { //*
                        g.drawImage(background_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == 1) {
                        g.drawImage(obstacle_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == entrada_) {
                        g.drawImage(robot_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == salida_) {
                        g.drawImage(station_, j * 40, i * 40, 40, 40, this);
                    } else if (matrix_[i][j] == flag_) {
                        g.setColor(Color.BLUE);
                        g.fillRect(j * 40, i * 40, 40, 40);
                        g.setColor(Color.BLUE);
                        g.drawRect(j * 40, i * 40, 40, 40);
                    }
                }
            }
        }
        //super.paint(g); //To change body of generated methods, choose Tools | Templates.
    }

    public int get_elem(int f, int c) {
        return matrix_[f][c];
    }

    public int get_fila_salida() {
        return filaSalida_;
    }

    public int get_columna_salida() {
        return columnaSalida_;
    }

    public boolean checkRoad(int f, int c) {

        if (f < 0 || f >= filas_ || c < 0 || c >= columnas_) {
            return false;
        }
        if (matrix_[f][c] == flag_ || matrix_[f][c] == 1) {
            return false;
        }
        return true;
    }

    public boolean checkListaAbierta(Nodo n) {
        for (int i = 0; i < listaAbierta.size(); i++) {
            Nodo aux = listaAbierta.get(i);
            if (aux == n) {
                return true;
            }
        }
        return false;
    }

    public boolean checkListaCerrada(Nodo n) {
        for (int i = 0; i < listaCerrada.size(); i++) {
            Nodo aux = listaCerrada.get(i);
            if (aux == n) {
                return true;
            }
        }
        return false;
    }

    public Nodo MenorDeLaLista() {
        int posMenor=0;
        Nodo menor = listaAbierta.get(posMenor);

        for (int i = 0; i < listaAbierta.size()-1; i++) {
            Nodo primero = listaAbierta.get(i);
            Nodo segundo = listaAbierta.get(i + 1);
            if ((primero.get_cost() <= segundo.get_cost()) && (primero.get_cost() < menor.get_cost())) {
                menor = primero;
                posMenor = i;
            } else if ((primero.get_cost() > segundo.get_cost()) && (segundo.get_cost() < menor.get_cost())) {
                menor = segundo;
                posMenor = i;
            }
        }
        listaAbierta.remove(posMenor);
        return menor;
    }
    private void EvaluarAdyacente(int f,int c) {
        
        if (checkRoad(f, c)) {
            Nodo adyacente = new Nodo(f, c, nodoFinal);
            if (!checkListaAbierta(adyacente) && !checkListaCerrada(adyacente)) {
                listaAbierta.add(adyacente);
            }
        }   
    }

    public boolean solve() {
        try {
            Thread.sleep(200);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

        while (filaEntrada_!=filaSalida_ && columnaEntrada_!=columnaSalida_) {
            
            //celda de arriba
            EvaluarAdyacente(filaEntrada_-1, columnaEntrada_);
            //celda de la derecha
            EvaluarAdyacente(filaEntrada_, columnaEntrada_+1);
            //celda de abajo
            EvaluarAdyacente(filaEntrada_+1, columnaEntrada_);
            //celda de la izquierda
            EvaluarAdyacente(filaEntrada_, columnaEntrada_-1);
            
            Nodo aux = MenorDeLaLista();
            listaCerrada.add(aux);
            filaEntrada_=aux.x_;
            columnaEntrada_=aux.y_;
            matrix_[aux.x_][aux.y_] = entrada_;
            matrix_[aux.x_][aux.y_] = flag_;
            repaint();
        }

        /*
        En caso de que LA se encuentre vacía y no seha llegado a la 
        salida del laberinto, entoncesno existe camino posible.
         */
        /*if (filaEntrada_ == filaSalida_ && columnaEntrada_ == columnaSalida_) {
            JOptionPane.showMessageDialog(this, "El laberinto tiene solucion");
            exit_ = true;
        } else {
            JOptionPane.showMessageDialog(this, "El laberinto NO tiene solucion");
            exit_ = false;
        }*/
        return exit_;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    }
}
